
#include "Enclave_t.h"



#include <stdarg.h>
#include <stdio.h>      /* vsnprintf */
#include <string.h>
#include <time.h>
#include <ctype.h>


#ifdef __cplusplus
extern "C" {
#endif
static const unsigned short c_loc_table[] = {
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 
0x2, 0x2003, 0x2002, 0x2002, 0x2002, 0x2002, 0x2, 0x2, 
0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 
0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 
0x6001, 0xc004, 0xc004, 0xc004, 0xc004, 0xc004, 0xc004, 0xc004, 
0xc004, 0xc004, 0xc004, 0xc004, 0xc004, 0xc004, 0xc004, 0xc004, 
0xd808, 0xd808, 0xd808, 0xd808, 0xd808, 0xd808, 0xd808, 0xd808, 
0xd808, 0xd808, 0xc004, 0xc004, 0xc004, 0xc004, 0xc004, 0xc004, 
0xc004, 0xd508, 0xd508, 0xd508, 0xd508, 0xd508, 0xd508, 0xc508, 
0xc508, 0xc508, 0xc508, 0xc508, 0xc508, 0xc508, 0xc508, 0xc508, 
0xc508, 0xc508, 0xc508, 0xc508, 0xc508, 0xc508, 0xc508, 0xc508, 
0xc508, 0xc508, 0xc508, 0xc004, 0xc004, 0xc004, 0xc004, 0xc004, 
0xc004, 0xd608, 0xd608, 0xd608, 0xd608, 0xd608, 0xd608, 0xc608, 
0xc608, 0xc608, 0xc608, 0xc608, 0xc608, 0xc608, 0xc608, 0xc608, 
0xc608, 0xc608, 0xc608, 0xc608, 0xc608, 0xc608, 0xc608, 0xc608, 
0xc608, 0xc608, 0xc608, 0xc004, 0xc004, 0xc004, 0xc004, 0x2, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
};

static const int c_loc_lower_table[] = {
0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 
0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 
0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 
0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 
0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 
0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 
0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 
0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 
0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 
0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 
0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 
0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 
0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 
0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 
0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 
0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 
0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 
0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 
0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 
0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 
0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 
0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 
0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 
0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 
0x40, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 
0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 
0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 
0x78, 0x79, 0x7a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 
0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 
0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 
0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 
0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 
0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 
0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 
0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 
0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 
0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 
0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 
0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 
0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 
0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 
0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 
0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 
0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 
0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 
0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 
0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 
0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 
};

static const unsigned short * 	c_loc_table_p 			= c_loc_table+128;
static const int * 				c_loc_lower_table_p 	= c_loc_lower_table+128;


typedef uint64_t FILE;
typedef uint64_t _IO_FILE;

_IO_FILE *stderr = NULL;

void printf(const char *fmt, ...);

FILE * fopen64( const char * __filename, const char * __modes );
FILE * fopen64( const char * __filename, const char * __modes )
{
	printf( "Unexpected call within enclave: %s\n", __FUNCTION__ ); 
	abort();
	
	return NULL;
}

int ferror( FILE * __stream )
{
	printf( "Unexpected call within enclave: %s\n", __FUNCTION__ ); 
	abort();
	
	return NULL;
}

int fseek( FILE * __stream,long int __off,int __whence )
{
	printf( "Unexpected call within enclave: %s\n", __FUNCTION__ ); 
	abort();
	
	return NULL;
}

int feof( FILE * __stream )
{
	printf( "Unexpected call within enclave: %s\n", __FUNCTION__ ); 
	abort();
	
	return NULL;
}

int fflush( FILE * __stream )
{
	printf( "Unexpected call within enclave: %s\n", __FUNCTION__ ); 
	abort();
	
	return NULL;
}

int fclose( FILE * __stream )
{
	printf( "Unexpected call within enclave: %s\n", __FUNCTION__ ); 
	abort();
	
	return NULL;
}

long int ftell( FILE * __stream )
{
	printf( "Unexpected call within enclave: %s\n", __FUNCTION__ ); 
	abort();
	
	return NULL;
}

size_t fwrite( const void * __ptr,size_t __size,size_t __n, FILE * __s )
{
	printf( "Unexpected call within enclave: %s\n", __FUNCTION__ ); 
	abort();
	
	return NULL;
}

size_t fread( void * __ptr,size_t __size,size_t __n, FILE * __stream )
{
	printf( "Unexpected call within enclave: %s\n", __FUNCTION__ ); 
	abort();
	
	return NULL;
}

char * fgets( char * __s,int __n, FILE * __stream )
{
	printf( "Unexpected call within enclave: %s\n", __FUNCTION__ ); 
	abort();
	
	return NULL;
}

typedef int __pid_t; 
__pid_t getpid( void )
{
	printf( "Unexpected call within enclave: %s\n", __FUNCTION__ ); 
	abort();
	
	return NULL;
}

// const unsigned short int ** __ctype_b_loc( void )
// {
// 	printf( "Unexpected call within enclave: %s\n", __FUNCTION__ ); 
// 	abort();
	
// 	return NULL;
// }

const unsigned short **__ctype_b_loc(void)
{
	// printf( "Unexpected call within enclave: %s\n", __FUNCTION__ ); 

	return &c_loc_table_p;
}

const __int32_t ** __ctype_tolower_loc( void )
{
	// printf( "Unexpected call within enclave: %s\n", __FUNCTION__ ); 
	return &c_loc_lower_table_p;
}

// const __int32_t ** __ctype_tolower_loc( void )
// {
// 	printf( "Unexpected call within enclave: %s\n", __FUNCTION__ ); 
// 	abort();
	
// 	return NULL;
// }

// typedef void* va_list;
int __vasprintf_chk (char **result_ptr, int flags, const char *format, va_list args)
{
	char *buf = ( char* )malloc( 1024 );
  	*result_ptr = buf;
	
	int done = vsnprintf(buf, 1024, format, args);

	return done;

	// printf( "Unexpected call within enclave: %s\n", __FUNCTION__ ); 
	// abort();
	
	// return NULL;
}

int __vfprintf_chk (FILE *, int, const char *)
{
	printf( "Unexpected call within enclave: %s\n", __FUNCTION__ ); 
	abort();
	
	return NULL;
}

typedef uint32_t mode_t;
int open( const char * __file,int __oflag,mode_t mode )
{
	printf( "Unexpected call within enclave: %s\n", __FUNCTION__ ); 
	abort();
	
	return NULL;
}

int __fxstat( int __ver,int __fildes, struct stat * __stat_buf )
{
	printf( "Unexpected call within enclave: %s\n", __FUNCTION__ ); 
	abort();
	
	return NULL;
}

typedef long ssize_t;
ssize_t read( int __fd, void * __buf,size_t __nbytes )
{
	printf( "Unexpected call within enclave: %s\n", __FUNCTION__ ); 
	abort();
	
	return NULL;
}

int close( int __fd )
{
	printf( "Unexpected call within enclave: %s\n", __FUNCTION__ ); 
	abort();
	
	return NULL;
}



#define YEAR0           1900                    /* the first year */
#define EPOCH_YR        1970            /* EPOCH = Jan 1 1970 00:00:00 */
#define SECS_DAY        (24L * 60L * 60L)
#define LEAPYEAR(year)  (!((year) % 4) && (((year) % 100) || !((year) % 400)))
#define YEARSIZE(year)  (LEAPYEAR(year) ? 366 : 365)
#define FIRSTSUNDAY(timp)       (((timp)->tm_yday - (timp)->tm_wday + 420) % 7)
#define FIRSTDAYOF(timp)        (((timp)->tm_wday - (timp)->tm_yday + 420) % 7)
#define TIME_MAX        ULONG_MAX
#define ABB_LEN         3

const unsigned int _ytab[2][12] = {
                { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 },
                { 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }
        };
// typedef uint64_t time_t;
// struct tm {time_t t;};
// struct tm * gmtime_r( const time_t * __timer, struct tm * __tp )
// {
// 	printf( "Unexpected call within enclave: %s\n", __FUNCTION__ ); 
// 	abort();
	
// 	return NULL;
// }

struct tm *
gmtime_r( const time_t *timer, struct tm * timep)
{
	printf( "Unexpected call within enclave: %s\n", __FUNCTION__ ); 
     // static struct tm br_time;
     // struct tm *timep = &br_time;
     time_t time = *timer;
     unsigned long dayclock, dayno;
     int year = EPOCH_YR;

     dayclock = (unsigned long)time % SECS_DAY;
     dayno = (unsigned long)time / SECS_DAY;

     timep->tm_sec = dayclock % 60;
     timep->tm_min = (dayclock % 3600) / 60;
     timep->tm_hour = dayclock / 3600;
     timep->tm_wday = (dayno + 4) % 7;       /* day 0 was a thursday */
     while (dayno >= YEARSIZE(year)) {
             dayno -= YEARSIZE(year);
             year++;
     }
     timep->tm_year = year - YEAR0;
     timep->tm_yday = dayno;
     timep->tm_mon = 0;
     while (dayno >= _ytab[LEAPYEAR(year)][timep->tm_mon]) {
             dayno -= _ytab[LEAPYEAR(year)][timep->tm_mon];
             timep->tm_mon++;
     }
     timep->tm_mday = dayno + 1;
     timep->tm_isdst = 0;

     return timep;
}

int sscanf(const char *ibuf, const char *fmt, ...)
{
	printf( "Unexpected call within enclave: %s\n", __FUNCTION__ ); 
	abort();
	
	return NULL;
}



void exit( int __status )
{
	printf( "Unexpected call within enclave: %s\n", __FUNCTION__ ); 
	abort();
}

// int __asprintf_chk (char **result_ptr, int flags, const char *format, ...)
// {
// 	printf( "Unexpected call within enclave: %s\n", __FUNCTION__ ); 
// 	abort();
	
// 	return NULL;
// }

int
__asprintf_chk (char **result_ptr, int flags, const char *format, ...)
{
  	printf( "Unexpected call within enclave: %s\n", __FUNCTION__ ); 

  	char *buf = ( char* )malloc( 128 );
  	*result_ptr = buf;
	va_list ap;
	va_start(ap, format);
	int done = vsnprintf(buf, 1024, format, ap);
	va_end(ap);
	return done;
}

time_t timegm (struct tm *tmp)
{
	printf( "Unexpected call within enclave: %s\n", __FUNCTION__ ); 
	abort();
	
	return NULL;
}

static time_t timestampNow = 0;
void EnclaveSetTime( time_t now )
{
	timestampNow = now;
}

time_t time(time_t *t)
{
	printf( "Unexpected call within enclave: %s. Returning static time\n", __FUNCTION__ ); 
	return timestampNow;
	// abort();
	
	// return NULL;
}


int __printf_chk( int __flag, const char * __format,... );

#ifdef __cplusplus
};
#endif


int __printf_chk( int __flag, const char * __format,... )
{
	// printf( "Unexpected call within enclave: %s\n", __FUNCTION__ ); 
	// ocall_print_string( __format );
	// printf( "\n" );

    char buf[1024] = {'\0'};
    va_list ap;
    va_start(ap, __format);
    vsnprintf(buf, 1024, __format, ap);
    va_end(ap);
    return ocall_print_string(buf);
    // printf( "----------\n" );
	// abort();
	
	// return NULL;
}

