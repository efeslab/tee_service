/*
 * Copyright (C) 2011-2016 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* Enclave.edl - Top EDL file. */

enclave {
	from "sgx_tkey_exchange.edl" import *;
	
	include "sgx_key_exchange.h"
    include "../include/openssm_error.h"
    include "../include/common.h"

    include "../include/hot_calls.h"

    trusted {
        public void         EcallStartResponder( [user_check] HotCall* hotEcall );          

        public void 		empty_enclave( void );
        public void 		EcallGetVersion( [out,size=bufferSize] char *enclaveVersion, size_t bufferSize );

        public sgx_status_t EcallInitRA( [out] sgx_ra_context_t *remoteAttestationContext );

        // //////////////// IMPORTANT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        // //////////////// The following function should be commented out in production
        // public void EcallPrintKeys( sgx_ra_context_t context ); 

        public OpenSSMStatus EcallEstablishSession( [ in ]                    sgx_sha256_hash_t*  userID,
                                                                              uint16_t            scheme, 
                                                    [ in,  size=payloadSize ] uint8_t*            remoteNonce, 
                                                    [ out, size=payloadSize ] uint8_t*            ssmNonce,
                                                                              size_t              payloadSize );

        public OpenSSMStatus EcallHandleEncryptedMsg( [in, out, size=maxResponseSize ]  EncryptedMsg*   encryptedMsg, 
                                                                                        size_t          maxResponseSize);
 
        public OpenSSMStatus EcallSealMasterSecrets( [ out, size=sealedDataSize ]   uint8_t* sealedMasterKeys, 
                                                                                    uint32_t sealedDataSize   );

        public OpenSSMStatus EcallUnsealMasterSecrets( [ in, size=sealedDataSize ]  uint8_t* sealedMasterKeys, 
                                                                                    uint32_t sealedDataSize   );

        public OpenSSMStatus EcallUnsealAllowedUsers( [ in, size=sealedDataSize ]  uint8_t* sealedAllowedUsers, 
                                                                                    uint32_t sealedDataSize   );

        public sgx_status_t SSM_ProcessMsg2 (sgx_ra_context_t context,
            [in]const sgx_ra_msg2_t *p_msg2, /*copy msg2 except quote into enclave */
            [in] const sgx_target_info_t *p_qe_target,
            [out] sgx_report_t *p_report,
            [out] sgx_quote_nonce_t *p_nonce );

        public uint32_t EcallSealMasterSecrets_getSealedDataSize();

        public uint64_t EcallGetSync();
    };
    untrusted {
        void ocall_print_string([in, string] const char *str);
        uint32_t ocall_store_key_on_disk(                   uint64_t keyHandle, 
                                            [in, size=len]  uint8_t* sealedKey,
                                                            uint32_t len);
        uint32_t ocall_read_key_from_disk(                  uint64_t keyHandle, 
                                            [out, size=len] uint8_t *sealedKey,
                                                            uint32_t len  );

        uint32_t OcallSaveAllowedUsers( [ in, size=len] uint8_t* sealedAllowedUsers, uint32_t len );
    };

};
